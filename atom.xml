<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://hit-1190200416.github.io/atom.xml" rel="self"/>
  
  <link href="http://hit-1190200416.github.io/"/>
  <updated>2025-05-21T11:28:27.390Z</updated>
  <id>http://hit-1190200416.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>rpc2</title>
    <link href="http://hit-1190200416.github.io/2025/05/21/rpc2/"/>
    <id>http://hit-1190200416.github.io/2025/05/21/rpc2/</id>
    <published>2025-05-21T08:19:51.000Z</published>
    <updated>2025-05-21T11:28:27.390Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序列化的作用"><a href="#序列化的作用" class="headerlink" title="序列化的作用"></a>序列化的作用</h2><p>&emsp;&emsp;这里先粘贴一段经典的序列化的定义：序列化是RPC中一个重要的功能，它的作用是把一个对象序列化成字节数组，然后通过网络传输到另一个进程，再反序列化成对象。在我们的RPC框架中，我们将需要调用的接口的具体信息以及调用的参数封装到一个对象中，然后将这个对象序列后化传输到服务的实现方。同样的，实现方也要将接口返回的结果序列化后再传回给调用方。</p><h2 id="序列化的方式"><a href="#序列化的方式" class="headerlink" title="序列化的方式"></a>序列化的方式</h2><p>&emsp;&emsp;在我参考的开源项目中实现了java原生的序列化和基于json的序列化两种方式。但是在我查到的资料中，有很多要优于这两种序列化的实现。最早我想自己实现一下性能最强的protobuf进行序列化。不过这种序列化方式还需要单独用中间语言定义实体并编译，感觉并不符合RPC框架的初衷遂放弃。随后我盯上了更为简单的protostuff序列化。为了证明这个序列化的有效性，我编写了一个简单的测试类，分析不同序列化框架下对象序列化后的大小。传输的过程中我们需要将对象向上造型为Object类型，并记录其class信息，以方便后续的调用。在这里我用一个简单的Student类型和Exam类型来模拟这个过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@SerializationRegister</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="meta">@Tag(1)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Tag(2)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="meta">@Tag(3)</span></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">    <span class="meta">@Tag(4)</span></span><br><span class="line">    <span class="keyword">private</span> Class clazz;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@SerializationRegister</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Exam</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Exam&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;score=&quot;</span> + score +</span><br><span class="line">                <span class="string">&quot;, course=&#x27;&quot;</span> + course + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Tag(1)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> score;</span><br><span class="line">    <span class="meta">@Tag(2)</span></span><br><span class="line">    <span class="keyword">private</span> String course;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Exam</span> <span class="variable">exam</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Exam</span>(<span class="number">99</span>, <span class="string">&quot;zz&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> exam;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;xx&quot;</span>, <span class="number">20</span>, o, Exam.class);</span><br><span class="line">        <span class="type">JsonSerializer</span> <span class="variable">jsonSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JsonSerializer</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;json序列化长度:&quot;</span> + jsonSerializer.serialize(student).length);</span><br><span class="line">        System.out.println(<span class="string">&quot;ProtoStuff序列化长度:&quot;</span> + ProtoStuffUtil.serialize(student).length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;然后我们测试两种序列化框架的序列化结果:<br><img src="/../images/2.png" alt="序列化长度对比"><br>&emsp;&emsp;从结果中可以发现，ProtoStuff序列化在长度上确实优于Json。但是这还不够，我们接下来要知道这个序列化的瓶颈在哪儿。很明显，与正常的序列化相比，我们在这里序列化最大的开销就是为了能够还原Object类型时所记录的Class信息。因此我们可以很自然的想到我们的调用方实现方都有同样的类信息，那么我们能不能用类名来替代Class对象呢？答案是可以的，我们先修改Student类，让Object对象变成一个字节数组，然后将Class对象变为字符串，在序列化和反序列化的双方通过字符串去查找类即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@SerializationRegister</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="meta">@Tag(1)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Tag(2)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="meta">@Tag(3)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] data;</span><br><span class="line">    <span class="meta">@Tag(4)</span></span><br><span class="line">    <span class="keyword">private</span> String clazz;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="type">Exam</span> <span class="variable">exam</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Exam</span>(<span class="number">99</span>, <span class="string">&quot;zz&quot;</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> exam;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;xx&quot;</span>, <span class="number">20</span>,</span><br><span class="line">        ProtoStuffUtil.serialize(o), (exam.getClass().getName()));</span><br><span class="line">    <span class="type">byte</span>[] bytes = ProtoStuffUtil.serialize(student);</span><br><span class="line">    System.out.println(bytes.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;运行后我们得到输出序列化长度为40，几乎只有序列化Class对象时的一半，如果我们将.getName()改为.getSimpleName()长度更是只有20。这就说明序列化对象时的开销主要都集中在了Class对象上。<br>&emsp;&emsp;那么在此基础上，我们还有没有什么能够进一步缩短这个字符串的方法呢？有的兄弟，有的！我们可以创建一个动态字典对复杂的类名进行映射。这里Exam作为类名已经很短了，但我们仍然可以用单个字符如”#”来映射这个类。然后在序列化时将类名替换为对应的字符，这样反序列化时只需要反查字典即可。那么我们该怎么实现这个功能呢？要实现这个功能首先我们需要在调用方和实现方都是有一个相同的字典，根据上述我们对RPC三方的拆解，要实现这个功能我们我们肯定是在接口的提供方创建一个这样的字典。当然，一个简单的方法就是我们手动添加这样的映射，但是这样相当的不优雅而且工作量很大，因此我们不能这么做。我在这里想到的方法就是通过编译时注解来添加动态的创建字典。因此首先我实现了一个字典类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassMapper</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">char</span>[] CHARS = <span class="keyword">new</span> <span class="title class_">char</span>[]&#123;<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;@&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;^&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;~&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentHashMap&lt;String, String&gt; codeToClassName = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentHashMap&lt;String, String&gt; classNameToCode = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Class&lt;?&gt;&gt; PRIMITIVE_TYPE_MAPPINGS = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClassMapper</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String className)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (classNameToCode.containsKey(className)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Class name already exists: &quot;</span> + className);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> counter.getAndIncrement();</span><br><span class="line">            <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> generateCode(count);</span><br><span class="line">            codeToClassName.put(code, className);</span><br><span class="line">            classNameToCode.put(className, code);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getClassNameByCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (String)codeToClassName.get(code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getCodeByClassName</span><span class="params">(String className)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (String)classNameToCode.get(className);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">generateCode</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> CHARS.length; count &gt;= max; max *= CHARS.length) &#123;</span><br><span class="line">            ++length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] digits = <span class="keyword">new</span> <span class="title class_">int</span>[length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            digits[i] = count % CHARS.length;</span><br><span class="line">            count /= CHARS.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span>[] var5 = digits;</span><br><span class="line">        <span class="type">int</span> <span class="variable">var6</span> <span class="operator">=</span> digits.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var7</span> <span class="operator">=</span> <span class="number">0</span>; var7 &lt; var6; ++var7) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> var5[var7];</span><br><span class="line">            sb.append(CHARS[d]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        PRIMITIVE_TYPE_MAPPINGS.put(<span class="string">&quot;byte&quot;</span>, Byte.class);</span><br><span class="line">        PRIMITIVE_TYPE_MAPPINGS.put(<span class="string">&quot;short&quot;</span>, Short.class);</span><br><span class="line">        PRIMITIVE_TYPE_MAPPINGS.put(<span class="string">&quot;int&quot;</span>, Integer.class);</span><br><span class="line">        PRIMITIVE_TYPE_MAPPINGS.put(<span class="string">&quot;long&quot;</span>, Long.class);</span><br><span class="line">        PRIMITIVE_TYPE_MAPPINGS.put(<span class="string">&quot;float&quot;</span>, Float.class);</span><br><span class="line">        PRIMITIVE_TYPE_MAPPINGS.put(<span class="string">&quot;double&quot;</span>, Double.class);</span><br><span class="line">        PRIMITIVE_TYPE_MAPPINGS.put(<span class="string">&quot;char&quot;</span>, Character.class);</span><br><span class="line">        PRIMITIVE_TYPE_MAPPINGS.put(<span class="string">&quot;boolean&quot;</span>, Boolean.class);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var0</span> <span class="operator">=</span> PRIMITIVE_TYPE_MAPPINGS.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var0.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;String, Class&lt;?&gt;&gt; entry = (Map.Entry)var0.next();</span><br><span class="line">            <span class="type">String</span> <span class="variable">primitiveName</span> <span class="operator">=</span> (String)entry.getKey();</span><br><span class="line">            Class&lt;?&gt; wrapperClass = (Class)entry.getValue();</span><br><span class="line">            <span class="type">String</span> <span class="variable">wrapperName</span> <span class="operator">=</span> wrapperClass.getName();</span><br><span class="line">            add(wrapperName);</span><br><span class="line">            <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> (String)classNameToCode.get(wrapperName);</span><br><span class="line">            classNameToCode.put(primitiveName, code);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        add(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.example.GeneratedRegistry&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var6) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;No extra class to load&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这个类主要的功能就是创建两个哈希表来建立一个编码和类名一一对应的字典，其映射规则也很简单，讲究一个先来后到，先来的优先用短的编码(要是在进一步优化可以考虑根据类型使用的频率使用哈夫曼树编码，不过我懒所以不想改了)，并且为了防止编码和类撞上，我们要求编码的第一个字符必须时数字或者特殊字符。然后在静态代码块中我们为java的基本类型创建一个映射，因为这些是常用且所有后续的RPC调用者都可以共享的。这里我们要注意到通过如int、double这样的非对象的类型我们无法通过他自己的类名来找到类，因此我们在这里将它们和它们对应的包裹类型共享一个编码。至于最后try catch中的类加载则是之后要用到的妙妙工具。<br>&emsp;&emsp;有了用于类映射后的基本工具后我们就可以开始编写注解相关的内容了。注解本身很简单我在这里就不贴代码了，重点在于怎么处理这个注解。这里我使用了AbstractProcessor类在编译时生成一个静态代码块，类名为com.example.GeneratedRegistry，其中的内容就是把被目标注解修饰的实体类注册进ClassMapper中。处理代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SupportedAnnotationTypes(&#123;&quot;org.example.SerializationRegister&quot;&#125;)</span></span><br><span class="line"><span class="meta">@AutoService(&#123;Processor.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeriRegProcessor</span> <span class="keyword">extends</span> <span class="title class_">AbstractProcessor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SeriRegProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">process</span><span class="params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv)</span> &#123;</span><br><span class="line">        Set&lt;? <span class="keyword">extends</span> <span class="title class_">Element</span>&gt; elements = roundEnv.getElementsAnnotatedWith(SerializationRegister.class);</span><br><span class="line">        List&lt;String&gt; classNames = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var5</span> <span class="operator">=</span> elements.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var5.hasNext()) &#123;</span><br><span class="line">            <span class="type">Element</span> <span class="variable">element</span> <span class="operator">=</span> (Element)var5.next();</span><br><span class="line">            <span class="keyword">if</span> (element.getKind() == ElementKind.CLASS) &#123;</span><br><span class="line">                <span class="type">TypeElement</span> <span class="variable">typeElement</span> <span class="operator">=</span> (TypeElement)element;</span><br><span class="line">                <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> typeElement.getQualifiedName().toString();</span><br><span class="line">                classNames.add(className);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!classNames.isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;code generating&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.generateRegistryClass(classNames);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">generateRegistryClass</span><span class="params">(List&lt;String&gt; classNames)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">packageName</span> <span class="operator">=</span> <span class="string">&quot;com.example&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="string">&quot;GeneratedRegistry&quot;</span>;</span><br><span class="line">            CodeBlock.<span class="type">Builder</span> <span class="variable">staticBlock</span> <span class="operator">=</span> CodeBlock.builder();</span><br><span class="line">            <span class="type">Iterator</span> <span class="variable">var5</span> <span class="operator">=</span> classNames.iterator();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(var5.hasNext()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">cn</span> <span class="operator">=</span> (String)var5.next();</span><br><span class="line">                staticBlock.addStatement(<span class="string">&quot;$T.add($S)&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;ClassMapper.class, cn&#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">TypeSpec</span> <span class="variable">registryClass</span> <span class="operator">=</span> TypeSpec.classBuilder(className).addModifiers(<span class="keyword">new</span> <span class="title class_">Modifier</span>[]&#123;Modifier.PUBLIC, Modifier.FINAL&#125;).addStaticBlock(staticBlock.build()).build();</span><br><span class="line">            <span class="type">JavaFile</span> <span class="variable">javaFile</span> <span class="operator">=</span> JavaFile.builder(packageName, registryClass).build();</span><br><span class="line">            javaFile.writeTo(<span class="built_in">this</span>.processingEnv.getFiler());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var7) &#123;</span><br><span class="line">            var7.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ProcessingEnvironment processingEnv)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.init(processingEnv);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------&quot;</span>);</span><br><span class="line">        System.out.println(processingEnv.getOptions());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SourceVersion <span class="title function_">getSupportedSourceVersion</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SourceVersion.latestSupported();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;将我们想要的实体用注解修饰后，我们在编译后的target中能找到静态类com.example.GeneratedRegistry，其内容为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">GeneratedRegistry</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    ClassMapper.add(<span class="string">&quot;com.example.commonapi.Student&quot;</span>);</span><br><span class="line">    ClassMapper.add(<span class="string">&quot;com.example.commonapi.Exam&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;到这里这个代码就完成了吗？否！还记得我们之前提到的妙妙工具吗？优于java对类的懒加载机制，如果GeneratedRegistry这个类没有被使用过，那么这段静态代码也完全不会执行，因此我在ClassMapper中手动加载了这个类来保证这段静态代码能够被执行。当时这个bug困扰了我非常久，只能说还是得学好java基础。<br>&emsp;&emsp;最后就是一些适配器模式的工作了。在原本的序列化中我是没打算挖这么深的，因此用于传输的Request类和Response类都是用Object对象+Class对象来封装信息。但是现在我们用了这种全新的序列化方式，为了不重新写web端的代码，在这里我们就使用适配器模式来进行新老Request类和Response类之间的互相转换。这里我们以Request为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RPCRequest</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">// 服务类名，客户端只知道接口名，在服务端中用接口名指向实现类</span></span><br><span class="line">    <span class="keyword">private</span> String interfaceName;</span><br><span class="line">    <span class="comment">// 方法名</span></span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line">    <span class="comment">// 参数列表</span></span><br><span class="line">    <span class="keyword">private</span> Object[] params;</span><br><span class="line">    <span class="comment">// 参数类型</span></span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt;[] paramsTypes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;原本的Request类非常的简洁，为了满足适配器模式的要求，我们在这里不对其进行任何修改，而是创建一个新的ProtoStuffRPCRequest类。其params属性改为字节数组的数组，paramsTypes属性改为字符串数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@SerializationRegister</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProtoStuffRequest</span> &#123;</span><br><span class="line">    <span class="meta">@Tag(1)</span></span><br><span class="line">    <span class="keyword">private</span> String interfaceName;</span><br><span class="line">    <span class="meta">@Tag(2)</span></span><br><span class="line">    <span class="comment">// 方法名</span></span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line">    <span class="meta">@Tag(3)</span></span><br><span class="line">    <span class="comment">// 参数列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[][] params;</span><br><span class="line">    <span class="meta">@Tag(4)</span></span><br><span class="line">    <span class="comment">// 参数类型</span></span><br><span class="line">    <span class="keyword">private</span> String[] paramsTypes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ProtoStuffRequest <span class="title function_">getFromRPC</span><span class="params">(RPCRequest rpcRequest)</span> &#123;</span><br><span class="line">        <span class="type">ProtoStuffRequest</span> <span class="variable">protoStuffRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProtoStuffRequest</span>();</span><br><span class="line">        protoStuffRequest.setInterfaceName(rpcRequest.getInterfaceName());</span><br><span class="line">        protoStuffRequest.setMethodName(rpcRequest.getMethodName());</span><br><span class="line">        Object[] objects = rpcRequest.getParams();</span><br><span class="line">        Class&lt;?&gt;[] clazz = rpcRequest.getParamsTypes();</span><br><span class="line">        <span class="type">byte</span>[][] params = <span class="keyword">new</span> <span class="title class_">byte</span>[objects.length][];</span><br><span class="line">        String[]paramsTypes = <span class="keyword">new</span> <span class="title class_">String</span>[clazz.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; objects.length; i++) &#123;</span><br><span class="line">            params[i] = ProtoStuffUtil.serialize(objects[i]);</span><br><span class="line">            <span class="keyword">if</span> (ClassMapper.getClassNameByCode(clazz[i].getName()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                paramsTypes[i] = ClassMapper.getClassNameByCode(clazz[i].getName());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                paramsTypes[i] = clazz[i].getName();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        protoStuffRequest.setParams(params);</span><br><span class="line">        protoStuffRequest.setParamsTypes(paramsTypes);</span><br><span class="line">        <span class="keyword">return</span> protoStuffRequest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> RPCRequest <span class="title function_">toRPCRequest</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">RPCRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RPCRequest</span>();</span><br><span class="line">        request.setInterfaceName(<span class="built_in">this</span>.interfaceName);</span><br><span class="line">        request.setMethodName(<span class="built_in">this</span>.methodName);</span><br><span class="line">        Object[] objects = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="built_in">this</span>.params.length];</span><br><span class="line">        Class&lt;?&gt;[] clazz = <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="built_in">this</span>.params.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.params.length; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="built_in">this</span>.paramsTypes[i];</span><br><span class="line">            <span class="keyword">if</span> (ClassMapper.getClassNameByCode(className) != <span class="literal">null</span>) &#123;</span><br><span class="line">                className = ClassMapper.getClassNameByCode(className);</span><br><span class="line">            &#125;</span><br><span class="line">            clazz[i] = Class.forName(className);</span><br><span class="line">            objects[i] = ProtoStuffUtil.deserialize(<span class="built_in">this</span>.params[i], clazz[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        request.setParamsTypes(clazz);</span><br><span class="line">        request.setParams(objects);</span><br><span class="line">        <span class="keyword">return</span> request;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在ProtoStuffRequest类中，我们添加了一个静态方法getFromRPC，这个方法将原本的RPCRequest对象转换为ProtoStuffRequest对象。在toRPCRequest方法中，我们则将ProtoStuffRequest对象转换为原本的RPCRequest对象。这样我们只需要在序列化时调用一下转换Request的方法就可以在完全不改变原本Web端代码的基础上完成“狸猫换太子”。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;序列化的作用&quot;&gt;&lt;a href=&quot;#序列化的作用&quot; class=&quot;headerlink&quot; title=&quot;序列化的作用&quot;&gt;&lt;/a&gt;序列化的作用&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;这里先粘贴一段经典的序列化的定义：序列化是RPC中一个重要的功能，它的作用是把一个对</summary>
      
    
    
    
    
    <category term="rpc" scheme="http://hit-1190200416.github.io/tags/rpc/"/>
    
    <category term="序列化" scheme="http://hit-1190200416.github.io/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>rpc1</title>
    <link href="http://hit-1190200416.github.io/2025/05/21/rpc1/"/>
    <id>http://hit-1190200416.github.io/2025/05/21/rpc1/</id>
    <published>2025-05-21T05:56:20.000Z</published>
    <updated>2025-05-21T08:46:57.886Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;&emsp;我的RPC项目来自于复现Gitee上的一个<a href="https://gitee.com/cjwwarren/MyRPCFromZero">开源项目</a>，不过在复现的时候根据自己对RPC的理解，增加了部分代码，比如服务注册和序列化的优化。这一系列的博客主要的目的就是记录一下自己增加这些代码的初心和实现是遇到的一些难题。</p><h1 id="自动服务注册"><a href="#自动服务注册" class="headerlink" title="自动服务注册"></a>自动服务注册</h1><h2 id="我对RPC的理解"><a href="#我对RPC的理解" class="headerlink" title="我对RPC的理解"></a>我对RPC的理解</h2><p>&emsp;&emsp;这里贴一段非常官方的说法：RPC（Remote Procedure Call，远程过程调用）是一种通过网络进行进程间通信的协议。RPC协议允许一个进程调用另一个进程的某个方法，就像调用本地方法一样。根据这段描述，我认为RPC的一个重要的目标就是调用远程方法就和调用一个本地库一样，毫无感知。 </p><h2 id="我认为的RPC的组成"><a href="#我认为的RPC的组成" class="headerlink" title="我认为的RPC的组成"></a>我认为的RPC的组成</h2><p>&emsp;&emsp;基于我粗略的学习Spring Cloud的认知，我觉得一个RPC的服务主要分为三个部分。一个是服务接口的提供方，这个部分的开发应该是最早的，其提供了RPC过程中需要调用的实体类以及函数接口，并且被打包成jar包安装到另外两个部分中。第二个部分是服务的实现方，这个部分实现提供方的接口，以供调用方通过web调用。最后就是调用方。调用方调用jar包中的接口，以此调用实现方中的最终实现。<br><img src="/../images/1.png" alt="三方示意图"></p><h2 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h2><p>&emsp;&emsp;第一个问题就是我们为什么需要服务注册。事实上RPC在调用的时候需要通过反射机制解析接口的内容，比如提供接口的接口类、方法名以及参数类型和返回值类型。然后使用合适的web框架将请求发送到服务实现方。服务实现方根据接口类、方法名以及参数类型和返回值类型找到对应的实现，然后调用<font color=red><strong>实现</strong></font>，最后返回调用结果和函数的结果。这里存在一个问题，调用方只知道接口类、方法名以及参数类型和返回值类型，但是不知道对应的实现。因此服务的提供方就必须要将实现方注册到服务注册中心，服务调用方才能找到对应的实现方。在我学习的开源项目中，这个部分是由提供方手动注册实现的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceProvider</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一个实现类可能实现多个接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; interfaceProvider;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceProvider</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.interfaceProvider = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">provideServiceInterface</span><span class="params">(Object service)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">serviceName</span> <span class="operator">=</span> service.getClass().getName();</span><br><span class="line">        Class&lt;?&gt;[] interfaces = service.getClass().getInterfaces();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Class clazz : interfaces)&#123;</span><br><span class="line">            interfaceProvider.put(clazz.getName(),service);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getService</span><span class="params">(String interfaceName)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> interfaceProvider.get(interfaceName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">        <span class="type">BlogService</span> <span class="variable">blogService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BlogServiceImpl</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Map&lt;String, Object&gt; serviceProvide = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        serviceProvide.put(&quot;com.ganghuan.myRPCVersion2.service.UserService&quot;,userService);</span></span><br><span class="line"><span class="comment">//        serviceProvide.put(&quot;com.ganghuan.myRPCVersion2.service.BlogService&quot;,blogService);</span></span><br><span class="line">        <span class="type">ServiceProvider</span> <span class="variable">serviceProvider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServiceProvider</span>();</span><br><span class="line">        serviceProvider.provideServiceInterface(userService);</span><br><span class="line">        serviceProvider.provideServiceInterface(blogService);</span><br><span class="line">        </span><br><span class="line">        <span class="type">RPCServer</span> <span class="variable">RPCServer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleRPCRPCServer</span>(serviceProvider);</span><br><span class="line">        RPCServer.start(<span class="number">8899</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这个实现方法看上去没什么问题，但是经过Spring框架熏陶过的我们肯定觉得这个方法不优雅。首先在服务启动的时候我们要手动的创建实现类，那么后续如果服务终止对资源的释放还得手动实现，这太过麻烦。因此将实现类注册为bean才是一个优雅的选择。通过注册bean然后在启动时找到bean手动放入serviceProvider中还是不够优雅，因此我们就需要利用到bean的生命周期，在服务创建完成时就将bean注册进serviceProvider中。因此我自定义了一个CustomService注解用于修饰我需要注册的实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span>  <span class="comment">// 只能用在类上</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span>  <span class="comment">// 运行时可用</span></span><br><span class="line"><span class="meta">@Service</span>  <span class="comment">// 继承 @Service 的功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CustomService &#123;</span><br><span class="line">    <span class="comment">// 可添加额外的属性</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;然后在bean的生命周期中解析这个注解，对所有包含了这个注解的bean进行注册进serviceProvider中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomServicePostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于存放所有 @CustomService 修饰的 Bean</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="comment">// 判断 Bean 是否被 @CustomService 修饰</span></span><br><span class="line">        <span class="keyword">if</span> (bean.getClass().isAnnotationPresent(CustomService.class)) &#123;</span><br><span class="line">            ServiceProvider.provideServiceInterface(bean);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;最后我们在Spring中配置这个生命周期的处理，这样我们就完成了自动服务注册。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;我的RPC项目来自于复现Gitee上的一个&lt;a href=&quot;https://gitee.com/cjwwarren/</summary>
      
    
    
    
    
    <category term="rpc" scheme="http://hit-1190200416.github.io/tags/rpc/"/>
    
    <category term="bean的生命周期" scheme="http://hit-1190200416.github.io/tags/bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
  </entry>
  
</feed>

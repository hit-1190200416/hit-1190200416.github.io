<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://hit-1190200416.github.io/atom.xml" rel="self"/>
  
  <link href="http://hit-1190200416.github.io/"/>
  <updated>2025-05-21T08:55:29.516Z</updated>
  <id>http://hit-1190200416.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>rpc2</title>
    <link href="http://hit-1190200416.github.io/2025/05/21/rpc2/"/>
    <id>http://hit-1190200416.github.io/2025/05/21/rpc2/</id>
    <published>2025-05-21T08:19:51.000Z</published>
    <updated>2025-05-21T08:55:29.516Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序列化的作用"><a href="#序列化的作用" class="headerlink" title="序列化的作用"></a>序列化的作用</h2><p>&emsp;&emsp;这里先粘贴一段经典的序列化的定义：序列化是RPC中一个重要的功能，它的作用是把一个对象序列化成字节数组，然后通过网络传输到另一个进程，再反序列化成对象。在我们的RPC框架中，我们将需要调用的接口的具体信息以及调用的参数封装到一个对象中，然后将这个对象序列后化传输到服务的提供方。同样的，提供方也要将接口返回的结果序列化后再传回给调用方。</p><h2 id="序列化的方式"><a href="#序列化的方式" class="headerlink" title="序列化的方式"></a>序列化的方式</h2><p>&emsp;&emsp;在我参考的开源项目中实现了java原生的序列化和基于json的序列化两种方式。但是在我查到的资料中，有很多要优于这两种序列化的实现。最早我想自己实现一下性能最强的protobuf进行序列化。不过这种序列化方式还需要单独用中间语言定义实体并编译，感觉并不符合RPC框架的初衷遂放弃。随后我盯上了更为简单的protostuff序列化。为了证明这个序列化的有效性，我编写了一个简单的测试类，分析不同序列化框架下对象序列化后的大小。传输的过程中我们需要将对象向上造型为Object类型，并记录其class信息，以方便后续的调用。在这里我用一个简单的Student类型和Exam类型来模拟这个过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@SerializationRegister</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="meta">@Tag(1)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Tag(2)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="meta">@Tag(3)</span></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">    <span class="meta">@Tag(4)</span></span><br><span class="line">    <span class="keyword">private</span> Class clazz;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@SerializationRegister</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Exam</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Exam&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;score=&quot;</span> + score +</span><br><span class="line">                <span class="string">&quot;, course=&#x27;&quot;</span> + course + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Tag(1)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> score;</span><br><span class="line">    <span class="meta">@Tag(2)</span></span><br><span class="line">    <span class="keyword">private</span> String course;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Exam</span> <span class="variable">exam</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Exam</span>(<span class="number">99</span>, <span class="string">&quot;zz&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> exam;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;xx&quot;</span>, <span class="number">20</span>, o, Exam.class);</span><br><span class="line">        <span class="type">JsonSerializer</span> <span class="variable">jsonSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JsonSerializer</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;json序列化长度:&quot;</span> + jsonSerializer.serialize(student).length);</span><br><span class="line">        System.out.println(<span class="string">&quot;ProtoStuff序列化长度:&quot;</span> + ProtoStuffUtil.serialize(student).length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;然后我们测试两种序列化框架的序列化结果:<br><img src="/../images/2.png" alt="序列化长度对比"><br>&emsp;&emsp;从结果中可以发现，ProtoStuff序列化在长度上确实优于Json。但是这还不够，我们接下来要知道这个序列化的瓶颈在哪儿。很明显，与正常的序列化相比，我们在这里序列化最大的开销就是为了能够还原Object类型时所记录的Class信息。因此我们可以很自然的想到我们的调用方和提供方都有同样的类信息，那么我们能不能用类名来替代Class对象呢？答案是可以的，我们先修改Student类，让Object对象变成一个字节数组，然后将Class对象变为字符串，在序列化和反序列化的双方通过字符串去查找类即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;序列化的作用&quot;&gt;&lt;a href=&quot;#序列化的作用&quot; class=&quot;headerlink&quot; title=&quot;序列化的作用&quot;&gt;&lt;/a&gt;序列化的作用&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;这里先粘贴一段经典的序列化的定义：序列化是RPC中一个重要的功能，它的作用是把一个对</summary>
      
    
    
    
    
    <category term="rpc" scheme="http://hit-1190200416.github.io/tags/rpc/"/>
    
    <category term="序列化" scheme="http://hit-1190200416.github.io/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>rpc1</title>
    <link href="http://hit-1190200416.github.io/2025/05/21/rpc1/"/>
    <id>http://hit-1190200416.github.io/2025/05/21/rpc1/</id>
    <published>2025-05-21T05:56:20.000Z</published>
    <updated>2025-05-21T08:46:57.886Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;&emsp;我的RPC项目来自于复现Gitee上的一个<a href="https://gitee.com/cjwwarren/MyRPCFromZero">开源项目</a>，不过在复现的时候根据自己对RPC的理解，增加了部分代码，比如服务注册和序列化的优化。这一系列的博客主要的目的就是记录一下自己增加这些代码的初心和实现是遇到的一些难题。</p><h1 id="自动服务注册"><a href="#自动服务注册" class="headerlink" title="自动服务注册"></a>自动服务注册</h1><h2 id="我对RPC的理解"><a href="#我对RPC的理解" class="headerlink" title="我对RPC的理解"></a>我对RPC的理解</h2><p>&emsp;&emsp;这里贴一段非常官方的说法：RPC（Remote Procedure Call，远程过程调用）是一种通过网络进行进程间通信的协议。RPC协议允许一个进程调用另一个进程的某个方法，就像调用本地方法一样。根据这段描述，我认为RPC的一个重要的目标就是调用远程方法就和调用一个本地库一样，毫无感知。 </p><h2 id="我认为的RPC的组成"><a href="#我认为的RPC的组成" class="headerlink" title="我认为的RPC的组成"></a>我认为的RPC的组成</h2><p>&emsp;&emsp;基于我粗略的学习Spring Cloud的认知，我觉得一个RPC的服务主要分为三个部分。一个是服务接口的提供方，这个部分的开发应该是最早的，其提供了RPC过程中需要调用的实体类以及函数接口，并且被打包成jar包安装到另外两个部分中。第二个部分是服务的实现方，这个部分实现提供方的接口，以供调用方通过web调用。最后就是调用方。调用方调用jar包中的接口，以此调用实现方中的最终实现。<br><img src="/../images/1.png" alt="三方示意图"></p><h2 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h2><p>&emsp;&emsp;第一个问题就是我们为什么需要服务注册。事实上RPC在调用的时候需要通过反射机制解析接口的内容，比如提供接口的接口类、方法名以及参数类型和返回值类型。然后使用合适的web框架将请求发送到服务实现方。服务实现方根据接口类、方法名以及参数类型和返回值类型找到对应的实现，然后调用<font color=red><strong>实现</strong></font>，最后返回调用结果和函数的结果。这里存在一个问题，调用方只知道接口类、方法名以及参数类型和返回值类型，但是不知道对应的实现。因此服务的提供方就必须要将实现方注册到服务注册中心，服务调用方才能找到对应的实现方。在我学习的开源项目中，这个部分是由提供方手动注册实现的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceProvider</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一个实现类可能实现多个接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; interfaceProvider;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceProvider</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.interfaceProvider = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">provideServiceInterface</span><span class="params">(Object service)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">serviceName</span> <span class="operator">=</span> service.getClass().getName();</span><br><span class="line">        Class&lt;?&gt;[] interfaces = service.getClass().getInterfaces();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Class clazz : interfaces)&#123;</span><br><span class="line">            interfaceProvider.put(clazz.getName(),service);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getService</span><span class="params">(String interfaceName)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> interfaceProvider.get(interfaceName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">        <span class="type">BlogService</span> <span class="variable">blogService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BlogServiceImpl</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Map&lt;String, Object&gt; serviceProvide = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        serviceProvide.put(&quot;com.ganghuan.myRPCVersion2.service.UserService&quot;,userService);</span></span><br><span class="line"><span class="comment">//        serviceProvide.put(&quot;com.ganghuan.myRPCVersion2.service.BlogService&quot;,blogService);</span></span><br><span class="line">        <span class="type">ServiceProvider</span> <span class="variable">serviceProvider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServiceProvider</span>();</span><br><span class="line">        serviceProvider.provideServiceInterface(userService);</span><br><span class="line">        serviceProvider.provideServiceInterface(blogService);</span><br><span class="line">        </span><br><span class="line">        <span class="type">RPCServer</span> <span class="variable">RPCServer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleRPCRPCServer</span>(serviceProvider);</span><br><span class="line">        RPCServer.start(<span class="number">8899</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这个实现方法看上去没什么问题，但是经过Spring框架熏陶过的我们肯定觉得这个方法不优雅。首先在服务启动的时候我们要手动的创建实现类，那么后续如果服务终止对资源的释放还得手动实现，这太过麻烦。因此将实现类注册为bean才是一个优雅的选择。通过注册bean然后在启动时找到bean手动放入serviceProvider中还是不够优雅，因此我们就需要利用到bean的生命周期，在服务创建完成时就将bean注册进serviceProvider中。因此我自定义了一个CustomService注解用于修饰我需要注册的实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span>  <span class="comment">// 只能用在类上</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span>  <span class="comment">// 运行时可用</span></span><br><span class="line"><span class="meta">@Service</span>  <span class="comment">// 继承 @Service 的功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CustomService &#123;</span><br><span class="line">    <span class="comment">// 可添加额外的属性</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;然后在bean的生命周期中解析这个注解，对所有包含了这个注解的bean进行注册进serviceProvider中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomServicePostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于存放所有 @CustomService 修饰的 Bean</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="comment">// 判断 Bean 是否被 @CustomService 修饰</span></span><br><span class="line">        <span class="keyword">if</span> (bean.getClass().isAnnotationPresent(CustomService.class)) &#123;</span><br><span class="line">            ServiceProvider.provideServiceInterface(bean);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;最后我们在Spring中配置这个生命周期的处理，这样我们就完成了自动服务注册。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;我的RPC项目来自于复现Gitee上的一个&lt;a href=&quot;https://gitee.com/cjwwarren/</summary>
      
    
    
    
    
    <category term="rpc" scheme="http://hit-1190200416.github.io/tags/rpc/"/>
    
    <category term="bean的生命周期" scheme="http://hit-1190200416.github.io/tags/bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
  </entry>
  
</feed>
